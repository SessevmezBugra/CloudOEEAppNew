version: '3.7'
services:

  frontend-app:
    image: bsessevmez/frontend-app:latest
    container_name: frontend-app
    build:
      context: frontend-app
      dockerfile: Dockerfile
    ports:
      - "80:80"
    restart: always
    depends_on:
      - gateway-service
    networks:
      - oee-compose-network

  # rabbitmq:
  #   image: rabbitmq:3.8.3-management
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   restart: always
  #   networks:
  #     - oee-compose-network

  eureka-server:
    environment: 
      CONFIG_URI: $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
    image: bsessevmez/eureka-server:latest
    build:
      context: eureka-server
      dockerfile: Dockerfile
    ports:
      - "8762:8761"
    restart: always
    depends_on:
      - config-service
    networks:
      - oee-compose-network

  storage:
    image: openzipkin/zipkin-mysql:${TAG:-latest}
    container_name: mysql
    # Uncomment to expose the storage port for testing
    # ports:
    #   - 3306:3306
    networks:
      - oee-compose-network


    # The zipkin process services the UI, and also exposes a POST endpoint that
    # instrumentation can send trace data to. Scribe is disabled by default.
  zipkin:
    image: openzipkin/zipkin:${TAG:-latest}
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/blob/master/zipkin-server/README.md#environment-variables
    environment:
      - STORAGE_TYPE=mysql
      # Point the zipkin at the storage backend
      - MYSQL_HOST=storage
      - MYSQL_USER=zipkin
      - MYSQL_PASS=zipkin
      # Uncomment to enable scribe
      # - SCRIBE_ENABLED=true
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin2=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
      # Uncomment if you set SCRIBE_ENABLED=true
      # - 9410:9410
    depends_on:
      - storage
    networks:
      - oee-compose-network

  # Adds a cron to process spans since midnight every hour, and all spans each day
  # This data is served by http://192.168.99.100:8080/dependency
  #
  # For more details, see https://github.com/openzipkin/docker-zipkin-dependencies
  dependencies:
    image: openzipkin/zipkin-dependencies
    container_name: dependencies
    entrypoint: crond -f
    environment:
      - STORAGE_TYPE=mysql
      - MYSQL_HOST=storage
      # Add the baked-in username and password for the zipkin-mysql image
      - MYSQL_USER=zipkin
      - MYSQL_PASS=zipkin
      # Uncomment to see dependency processing logs
      # - ZIPKIN_LOG_LEVEL=DEBUG
      # Uncomment to adjust memory used by the dependencies job
      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G
    depends_on:
      - storage
    networks:
      - oee-compose-network

  gateway-service:
    environment:
      # RABBIT_URI: $RABBIT_URI
      CONFIG_URI:  $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
    image: bsessevmez/gateway-service:latest
    build:
      context: gateway-service
      dockerfile: Dockerfile
#    ports:
#      - "4000:4000"
    restart: always
    depends_on:
      - eureka-server
      # - rabbitmq
#      - zipkin-server
      - config-service
    networks:
      - oee-compose-network

  auth-service:
    environment:
      # RABBIT_URI: $RABBIT_URI
#      RDS_HOSTNAME: $RDS_AUTH_HOSTNAME
#      RDS_PORT: $RDS_PORT
#      RDS_DB_NAME: $RDS_DB_NAME
#      RDS_USERNAME: $RDS_USERNAME
#      RDS_PASSWORD: $RDS_PASSWORD
      CONFIG_URI:  $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
    image: bsessevmez/auth-service:latest
    build:
      context: auth-service
      dockerfile: Dockerfile
    # ports:
    #   - "5000:5000"
    restart: always
    depends_on:
      - eureka-server
      # - rabbitmq
#      - zipkin-server
      - auth-database
      - config-service
    networks:
      - oee-compose-network

  auth-database:
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
    image: mysql:8.0
    ports:
      - "3307:3306"
    restart: always
    volumes:
      - mysql-database-data-volume:/var/lib/auth-database
    networks:
      - oee-compose-network
      
  config-service:
    environment:
      # RABBIT_URI: $RABBIT_URI
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
    image: bsessevmez/config-service:latest
    build:
      context: config-service
      dockerfile: Dockerfile
#    ports:
#      - "8888:8888"
    restart: always
#    depends_on:
      # - rabbitmq
#      - zipkin-server
    networks:
      - oee-compose-network

  confirmation-service:
    environment:
      # RABBIT_URI: $RABBIT_URI
      RDS_HOSTNAME: $RDS_CONFIRMATION_HOSTNAME
      RDS_PORT: $RDS_PORT
      RDS_DB_NAME: $RDS_DB_NAME
      RDS_USERNAME: $RDS_USERNAME
      RDS_PASSWORD: $RDS_PASSWORD
      CONFIG_URI:  $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
    image: bsessevmez/confirmation-service:latest
    build:
      context: confirmation-service
      dockerfile: Dockerfile
#    ports:
#      - "8050:8050"
    restart: always
    depends_on:
      - eureka-server
      # - rabbitmq
#      - zipkin-server
      - config-service
    networks:
      - oee-compose-network

  confirmation-database:
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
    image: mysql:8.0
    ports:
      - "3308:3306"
    restart: always
    volumes:
      - mysql-database-data-volume:/var/lib/confirmation-database
    networks:
      - oee-compose-network

  maindata-service:
    environment:
      # RABBIT_URI: $RABBIT_URI
      RDS_HOSTNAME: $RDS_MAINDATA_HOSTNAME
      RDS_PORT: $RDS_PORT
      RDS_DB_NAME: $RDS_DB_NAME
      RDS_USERNAME: $RDS_USERNAME
      RDS_PASSWORD: $RDS_PASSWORD
      CONFIG_URI: $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
    image: bsessevmez/maindata-service:latest
    build:
      context: maindata-service
      dockerfile: Dockerfile
    # ports:
    #   - "8090:8090"
    restart: always
    depends_on:
      - eureka-server
      # - rabbitmq
#      - zipkin-server
      - maindata-database
      - config-service
    networks:
      - oee-compose-network

  maindata-database:
    image: mysql:8.0
    ports:
      - "3309:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
    volumes:
      - mysql-database-data-volume:/var/lib/maindata-database
    networks:
      - oee-compose-network
      
  order-service:
    image: bsessevmez/order-service:latest
    build:
      context: order-service
      dockerfile: Dockerfile    
    environment:
      # RABBIT_URI: $RABBIT_URI
      RDS_HOSTNAME: $RDS_ORDER_HOSTNAME
      RDS_PORT: $RDS_PORT
      RDS_DB_NAME: $RDS_DB_NAME
      RDS_USERNAME: $RDS_USERNAME
      RDS_PASSWORD: $RDS_PASSWORD
      CONFIG_URI: $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
#    ports:
#      - "8060:8060"
    restart: always
    depends_on:
      - eureka-server
      # - rabbitmq
#      - zipkin-server
      - config-service
    networks:
      - oee-compose-network

  order-database:
    image: mysql:8.0
    ports:
      - "3310:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
    volumes:
      - mysql-database-data-volume:/var/lib/order-database
    networks:
      - oee-compose-network

  stock-service:
    image: bsessevmez/stock-service:latest
    build:
      context: stock-service
      dockerfile: Dockerfile    
    environment:
      # RABBIT_URI: $RABBIT_URI
      RDS_HOSTNAME: $RDS_STOCK_HOSTNAME
      RDS_PORT: $RDS_PORT
      RDS_DB_NAME: $RDS_DB_NAME
      RDS_USERNAME: $RDS_USERNAME
      RDS_PASSWORD: $RDS_PASSWORD
      CONFIG_URI:  $CONFIG_URI
      FAIL_FAST: $FAIL_FAST
      EUREKA_URI: $EUREKA_URI
      ZIPKIN_URI: $ZIPKIN_URI
#    ports:
#      - "8070:8070"
    restart: always
    depends_on:
      - eureka-server
      # - rabbitmq
#      - zipkin-server
      - config-service
    networks:
      - oee-compose-network

  stock-database:
    image: mysql:8.0
    ports:
      - "3311:3306"
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_USER: $MYSQL_USER
      MYSQL_PASSWORD: $MYSQL_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
    volumes:
      - mysql-database-data-volume:/var/lib/stock-database
    networks:
      - oee-compose-network

  mysql-keycloak:
    image: mysql:5.7
    volumes:
      - mysql-database-data-volume:/var/lib/mysql-keycloak
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
    ports:
      - "3312:3306"
    networks:
      - oee-compose-network

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql-keycloak
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the MySQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "connectTimeout=30000"
    ports:
      - 8081:8080
    depends_on:
      - mysql-keycloak
    networks:
      - oee-compose-network

# Volumes
volumes:
  mysql-database-data-volume:
  prometheus-volume:

# Networks to be created to facilitate communication between containers
networks:
  oee-compose-network: